---
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import Searchicon from "../../assets/blog/search.png";
import { getBlog } from "../../libs/microcms";
const response = await getBlog();
const list = response.contents;
---

<Layout>
  <div class="search">
    <Image src={Searchicon} alt="" width="30" />
    <div class="searchBox">
      <input
        id="Search"
        type="text"
        placeholder="タイトルで検索..."
        style="width: 100%; height: 100%; border: none; padding: 5px;"
      />
    </div>
  </div>

  <div id="blogList" class="bg">
    {
      list.map((data) => {
        const date = new Date(data.updatedAt as string);
        const formattedDate = date.toLocaleDateString("ja-JP", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
        });

        return (
          <div class="underline">
            <a href={`/blog/${data.slug}`} class="link" />
            <div class="picture">
              <img src={data.eyecatch.url} class="eyecatch" />
            </div>
            <div class="title">
              <p>{data.title}</p>
              <p>{formattedDate}</p>
            </div>
          </div>
        );
      })
    }
  </div>
</Layout>

<script>
  // クライアント側で動くようにする
  document.addEventListener("DOMContentLoaded", () => {
    const Searchdate = document.getElementById("Search") as HTMLInputElement;
    const blogList = document.getElementById("blogList");

    // 初期リストを保持
    const originalList = [...blogList!.children];

    Searchdate?.addEventListener("input", () => {
      const keyword = Searchdate.value.trim().toLowerCase();

      // 一旦リストをクリア
      blogList!.innerHTML = "";

      // フィルタリング
      const filtered = originalList.filter((el) => {
        const title = el.querySelector("p")?.textContent?.toLowerCase() ?? "";
        return title.includes(keyword);
      });

      // 一致する記事を再描画
      filtered.forEach((el) => blogList!.appendChild(el));
    });
  });
</script>

<style>
  .search {
    position: sticky;
    top: 0;
    z-index: 999;

    height: 60px;
    background-color: #98a786;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .searchBox {
    height: 25px;
    width: 80%;
    background-color: #f8faef;
  }

  .bg {
    /* height: 100%; */
    background-color: #f8faef; /* 背景色指定 */
  }

  .underline {
    position: relative;
    display: flex;
    gap: 8px;
    padding: 8px;
    border-bottom: 2px dashed #333; /*点線の色指定 */
  }

  .link {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  .picture {
    align-items: center;
    flex: 2;
  }

  .eyecatch {
    width: 100%;
    /* width: 0; */
  }

  .title {
    flex: 3;
  }
</style>
