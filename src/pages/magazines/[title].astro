---
import Layout from "../../layouts/Layout.astro";
import { getMagazine } from "../../libs/microcms";
import Arrow from "../../assets/magazines/leftArrow.png";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const response = await getMagazine();
  const contents = response.contents;
  return contents.map((contents) => ({
    params: { title: contents.title },
  }));
}

const { title } = Astro.params;

const response = await getMagazine({ filters: `title[equals]${title}` });
const contents = response.contents;
const item = contents[0];
const url = item?.url;
---

<Layout>
  <div id="container" data-url={url}></div>
  <div class="custom-main">
    <a href="./" class="back">
      <Image src={Arrow} alt="" width={30} />
    </a>
    <div class="pdfsize">
      <canvas id="the-canvas"></canvas>
    </div>
    <div class="prevnext">
      <button id="prev" type="button">Back</button>
      <button id="next" type="button">Next</button>
      <br />
      <span
        >Page: <span id="page_num"></span> / <span id="page_count"></span></span
      >
    </div>
    <script src="/build/pdf.mjs" type="module"></script>
  </div>

  <script id="script" type="module">
    (async () => {
      const container = document.getElementById("container");
      const pdfPath = container.dataset.url;

      pdfjsLib.GlobalWorkerOptions.workerSrc = "/build/pdf.worker.mjs";

      var canvas = document.getElementById("the-canvas");
      var context = canvas.getContext("2d");
      //
      var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null;

      function renderPage(num) {
        pageRendering = true;
        // Using promise to fetch the page
        pdfDoc.getPage(num).then(function (page) {
          var unscaledViewport = page.getViewport({ scale: 1 });
          //var scale=canvas.width / unscaledViewport.width;
          var custom_main = document.getElementsByClassName("custom-main")[0];
          var scale = Math.min(
            custom_main.clientWidth / unscaledViewport.width,
            custom_main.clientHeight / unscaledViewport.height,
          );
          var viewport = page.getViewport({ scale: scale });

          // Support HiDPI-screens.
          var outputScale = window.devicePixelRatio || 1;

          var transform =
            outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;

          // Render PDF page into canvas context
          var renderContext = {
            canvasContext: context,
            transform: transform,
            viewport: viewport,
          };
          var renderTask = page.render(renderContext);
          canvas.width = Math.floor(viewport.width * outputScale);
          canvas.height = Math.floor(viewport.height * outputScale);
          canvas.style.height = Math.floor(viewport.height) + "px";
          canvas.style.width = Math.floor(viewport.width) + "px";
          // Wait for rendering to finish
          renderTask.promise.then(function () {
            pageRendering = false;
            if (pageNumPending !== null) {
              // New page rendering is pending
              renderPage(pageNumPending);
              pageNumPending = null;
            }
          });
        });

        // Update page counters
        document.getElementById("page_num").textContent = num;
      }

      function queueRenderPage(num) {
        if (pageRendering) {
          pageNumPending = num;
        } else {
          renderPage(num);
        }
      }

      function onPrevPage() {
        if (pageNum <= 1) {
          return;
        }
        pageNum--;
        queueRenderPage(pageNum);
      }
      document.getElementById("prev").addEventListener("click", onPrevPage);

      function onNextPage() {
        if (pageNum >= pdfDoc.numPages) {
          return;
        }
        pageNum++;
        queueRenderPage(pageNum);
      }
      document.getElementById("next").addEventListener("click", onNextPage);
      if (pdfPath == undefined) {
        var loadingTask = pdfjsLib.getDocument(
          "../../src/assets/magazines/no_image.pdf",
        );
      } else {
        var loadingTask = pdfjsLib.getDocument(pdfPath);
      }
      pdfDoc = await loadingTask.promise;
      document.getElementById("page_count").textContent = pdfDoc.numPages;
      renderPage(pageNum);
    })();
  </script>
</Layout>

<style>
  #the-canvas {
    width: fit-content;
  }
  .pdfsize {
    width: auto;
    overflow: auto;
  }
  .custom-main {
    width: auto;
    height: 100%;
    background-color: #f8faef;
  }
  .prevnext {
    font-size: 30px;
    color: #4c5b5c;
  }
  #prev {
    float: left;
  }
  #next {
    float: right;
  }
  .back {
    display: inline-block;
    margin: 2px;
  }
  .pdfsize {
    width: 100%;
    height: 80%;
  }
</style>
