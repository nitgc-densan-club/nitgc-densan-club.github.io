---
import Layout from "../../layouts/Layout.astro";
import { getMagazine } from "../../libs/microcms";
import Arrow from "../../assets/magazines/leftArrow.png";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const response = await getMagazine();
  const contents = response.contents;
  return contents.map((contents) => ({
    params: { title: contents.title },
  }));
}

const { title } = Astro.params;

const response = await getMagazine({ filters: `title[equals]${title}` });
const contents = response.contents;
const item = contents[0];
const url = item?.url;
---

<Layout>
  <div id="container" data-url={url}></div>
  <div class="custom-main">
    <a href="/magazines/" class="back">
      <Image src={Arrow} alt="" width={24} />
    </a>
    <div id="the-canvas-container" class="pdfsize">
      <canvas id="the-canvas"></canvas>
    </div>
    <div class="footer">
      <button id="prev" type="button">Prev</button>
      <div>
        <span id="page_num"></span> / <span id="page_count"></span>
      </div>
      <button id="next" type="button">Next</button>
    </div>
  </div>
</Layout>

<script is:inline type="module">
  import "/build/pdf.mjs";
  pdfjsLib.GlobalWorkerOptions.workerSrc = "/build/pdf.worker.mjs";

  const container = document.getElementById("container");
  const pdfPath = container.dataset.url;

  const canvas = document.getElementById("the-canvas");
  const context = canvas.getContext("2d");

  let pdfDoc = null;
  let pageNum = 1;
  const pendingQueue = [];
  let pageRendering = false;

  async function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    const page = await pdfDoc.getPage(num);

    var unscaledViewport = page.getViewport({ scale: 1 });
    //var scale=canvas.width / unscaledViewport.width;
    var custom_main = document.getElementsByClassName("custom-main")[0];
    var scale = Math.min(
      custom_main.clientWidth / unscaledViewport.width,
      custom_main.clientHeight / unscaledViewport.height,
    );
    var viewport = page.getViewport({ scale: scale });

    // Support HiDPI-screens.
    var outputScale = window.devicePixelRatio || 1;

    var transform =
      outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;

    // Render PDF page into canvas context
    var renderContext = {
      canvasContext: context,
      transform: transform,
      viewport: viewport,
    };
    var renderTask = page.render(renderContext);
    canvas.width = Math.floor(viewport.width * outputScale);
    canvas.height = Math.floor(viewport.height * outputScale);
    canvas.style.height = Math.floor(viewport.height) + "px";
    canvas.style.width = Math.floor(viewport.width) + "px";
    // Wait for rendering to finish
    await renderTask.promise;

    pageRendering = false;

    // Update page counters
    document.getElementById("page_num").textContent = num;

    // if (pageNumPending !== null) {
    //   // New page rendering is pending
    //   await renderPage(pageNumPending);
    //   pageNumPending = null;
    // }

    // pendingにキューを使用するように変更
    if (pendingQueue.length) {
      await renderPage(pendingQueue.shift());
    }
  }

  async function queueRenderPage(num) {
    if (pageRendering) {
      pendingQueue.push(num);
    } else {
      await renderPage(num);
    }
  }

  async function onPrevPage() {
    if (pageNum <= 1) return;

    pageNum--;
    await queueRenderPage(pageNum);
  }
  document.getElementById("prev").addEventListener("click", onPrevPage);

  async function onNextPage() {
    if (pageNum >= pdfDoc.numPages) return;

    pageNum++;
    await queueRenderPage(pageNum);
  }
  document.getElementById("next").addEventListener("click", onNextPage);
  if (pdfPath == undefined) {
    var loadingTask = pdfjsLib.getDocument(
      "../../src/assets/magazines/no_image.pdf",
    );
  } else {
    var loadingTask = pdfjsLib.getDocument(pdfPath);
  }

  pdfDoc = await loadingTask.promise;
  document.getElementById("page_count").textContent = pdfDoc.numPages;

  await renderPage(pageNum);

  // Windowのリサイズ時に再レンダリング
  new ResizeObserver(async () => {
    await queueRenderPage(pageNum);
  }).observe(document.getElementById("the-canvas-container"));
</script>

<style>
  #the-canvas {
    width: fit-content;
  }
  .pdfsize {
    width: auto;
  }
  .custom-main {
    width: auto;
    height: 100%;
    background-color: #f8faef;
  }
  .footer {
    display: flex;
    justify-content: space-between;
    padding: 0 4px;

    font-size: 24px;
    font-weight: bold;
    color: #4c5b5c;
  }

  .back {
    position: absolute;
    padding: 4px;
  }
</style>
